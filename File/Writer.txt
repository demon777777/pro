Теория: Написание файлов

Теперь, когда мы узнали, как создавать файлы и управлять ими, давайте обсудим, как записывать текст в файл. Java предоставляет различные способы делать это , и в этом уроке мы рассмотрим два из самых простых способов: с помощью java.io.FileWriterи на  java.io.PrintWriterклассы. Техника работы абсолютно понятна.

Класс FileWriter
Класс FileWriterимеет набор конструкторов для записи символов и строки в указанный файл:

FileWriter(String fileName);
FileWriter(String fileName, boolean append);
FileWriter(File file);
FileWriter(File file, boolean append);
Два конструктора принимают дополнительный параметр append, который указывает, добавлять ли ( true) или перезаписывать ( false) существующий файл.

Все эти конструкторы могут вызывать IOExceptionпо нескольким причинам:

если указанный файл существует, но это каталог;
если файл не существует и не может быть создан;
если файл существует, но не может быть открыт.
В этом уроке иногда мы пропускаем механизм обработки исключений, чтобы упростить наши примеры.

Давайте рассмотрим следующий код:

File file = new File("/home/username/path/to/your/file.txt");
FileWriter writer = new FileWriter(file); // overwrites the file
 
writer.write("Hello");
writer.write("Java");
 
writer.close();
Если указанный файл не существует, он будет создан после выполнения этого кода. Если файл уже существует, этот код перезаписывает данные.

Файл будет содержать текст HelloJava .

Если вы хотите добавить новые данные, вы должны указать второй аргумент как true.

File file = new File("/home/username/path/to/your/file.txt");
FileWriter writer = new FileWriter(file, true); // appends text to the file
 
writer.write("Hello, World\n");
writer.close();
Этот код добавляет новую строку в файл. Запустите его несколько раз, чтобы увидеть, что происходит. Обратите внимание, что здесь мы используем Unix-подобные OS переводчики строк. Существует разница между символами разрыва строки:

\n Unix-подобная ОС
\r\n ОС Windows
Закрытие FileWriter
Важно закрыть FileWriterпосле использования, чтобы избежать утечки ресурса. Это делается путем вызова метода close:

writer.close();
Начиная с Java 7, удобным способом закрытия объекта FileWriterявляется использование оператора try-with-resources .

File file = new File("/home/username/path/to/your/file.txt");
 
try (FileWriter writer = new FileWriter(file)) {
    writer.write("Hello, World");
} catch (IOException e) {
    System.out.printf("An exception occurs %s", e.getMessage());
}
Это закроет писателя автоматически.

Класс PrintWriter
PrintWriterКласс позволяет записывать отформатированные данные в файл. Он может выводить строки, примитивные типы и даже массив символов. Класс обеспечивает несколько перегруженных методов: print, printlnи printf.

File file = new File("/home/art/Documents/file.txt");
try (PrintWriter printWriter = new PrintWriter(file)) {
    printWriter.print("Hello"); // prints a string
    printWriter.println("Java"); // prints a string and then terminates the line
    printWriter.println(123); // prints a number
    printWriter.printf("You have %d %s", 400, "gold coins"); // prints a formatted string
} catch (IOException e) {
    System.out.printf("An exception occurs %s", e.getMessage());
}
В этом примере сначала создается экземпляр Fileи, во- вторых, PrintWriterв примерочных с-ресурсов заявление , чтобы закрыть его правильно. Он пишет "Hello"и "Java" в той же строке, а затем  123в новой строке. Этот пример также называют расширенный printfметод , который может форматировать текст , используя %d, %sи так далее. Наконец, PrintWriterзакрыто.

Результат содержит:

HelloJava
123
You have 400 gold coins
У класса есть несколько конструкторов. Некоторые из них похожи на конструкторы FileWriter:

PrintWriter(String fileName);
PrintWriter(File file);
Другие позволяют передавать FileWriterкак класс, расширяющий Writerабстрактный класс:

PrintWriter(Writer writer);
 

FileWriterи PrintWriterоба расширяют Writerабстрактный класс и имеют много общего. Тем не менее,  PrintWriterэто скорее высокоуровневый и предоставляет несколько полезных методов. Среди них есть методы форматирования и перегруженные методы печати для написания примитивных типов.